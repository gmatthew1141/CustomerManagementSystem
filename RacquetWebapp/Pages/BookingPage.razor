@page "/bookings"

@inject IViewBookingsUseCase ViewBookingsUseCase
@inject IGetCustomerByIdUseCase GetCustomerByIdUseCase
@inject IGetTimestampUseCase GetTimestampUseCase
@inject IRemoveBookingUseCase RemoveBookingUseCase
@inject NavigationManager NavigationManager

<h3><b>Bookings List</b></h3>

<br />

<button type="button" class="btn btn-primary float-right" @onclick="OnClickAddButton">Create new bookings</button>
<br />
<br />

<table class="table text-center">
    <thead>
        <tr>
            <th>Name</th>
            <th>Time</th>
            <th>Duration</th>
            <th>Court</th>
            <th>Start</th>
            <th>Expired</th>
            <th>Play</th>
            <th>Played</th>
            <th>Remain</th>
            <th>Note</th>
            <th>Option</th>
        </tr>
    </thead>
    <tbody>
        @if (bookings != null) {
            @foreach (var book in bookings) {
                <tr>
                    <td>@(GetCustomerByIdUseCase.GetCustomerById(book.CustomerId).Name)</td>
                    <td>@GetTimestampUseCase.GetTimestampByKey(book.StartTime)</td>
                    <td>@book.Duration</td>
                    <td>@(book.SportType + " " + book.CourtNum)</td>
                    <td>@book.StartDate.ToString("ddd, dd/MM/yy")</td>
                    <td>@book.ExpirationDate.ToString("ddd, dd/MM/yy")</td>
                    <td>@book.NumOfPlay</td>
                    <td>@book.NumOfPlayed</td>
                    <td>@book.NumOfPlayedLeft</td>
                    <td class="text-left">@book.Note</td>
                    <td>
                        <button type="button" class="btn btn-link" @onclick="(() => OnClickEditButton(book.BookingId))">Edit</button>|<button type="button" class="btn btn-link" @onclick="(() => OnClickRemoveButton(book.BookingId))">Remove</button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@code {

public IEnumerable<Booking> bookings;

protected override void OnInitialized() {
    base.OnInitialized();
    LoadBooking();
}

private void OnClickAddButton() {
    NavigationManager.NavigateTo("/addbookings");
}

private void OnClickEditButton(int bookingId) {
    NavigationManager.NavigateTo($"/editbooking/{bookingId}");
}

private void OnClickRemoveButton(int bookingId) {
    RemoveBookingUseCase.Execute(bookingId);
    LoadBooking();
}

private void LoadBooking() {
    bookings = ViewBookingsUseCase.Execute().OrderByDescending(x => x.ExpirationDate);

}
}