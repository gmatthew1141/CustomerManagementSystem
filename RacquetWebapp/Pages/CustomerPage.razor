@page "/customers"

@inject NavigationManager NavigationManager
@inject IViewCustomerUseCase ViewCustomerUseCase
@inject IRemoveCustomerUseCase RemoveCustomerUseCase

<h3><b>Customer List</b></h3>

<br />

<button class="btn btn-primary float-right" type="button" @onclick="OnClickAddCustomer">Add Customer</button>
<br />
<br />
<table class="table text-center">
    <thead>
        <tr>
            <th>Name</th>
            <th>Address</th>
            <th>Phone Number</th>
            <th>Email</th>
            <th>Note</th>
            <th>Options</th>
        </tr>
    </thead>
    @if (customers != null) {
        <tbody>
            @foreach (var cust in customers) {
                <tr>
                    <td>@cust.Name</td>
                    <td>@cust.Address</td>
                    <td>@cust.PhoneNumber</td>
                    <td>@cust.Email</td>
                    <td>@cust.Note</td>
                    <td>
                        <button type="button" class="btn btn-link" @onclick="@(() => OnClickEditBtn(cust.CustomerId))">Edit</button>|<button type="button" class="btn btn-link" @onclick="@(() => OnClickRemoveBtn(cust.CustomerId))">Remove</button>
                    </td>
                </tr>
            }
        </tbody>
    }
</table>

@code {
    private IEnumerable<Customer> customers;

    protected override void OnInitialized() {
        base.OnInitialized();
        LoadCustomers();
    }

    private void OnClickAddCustomer() {
        NavigationManager.NavigateTo("/addcustomer");
    }

    private void OnClickEditBtn(int customerId) {
        NavigationManager.NavigateTo($"/editcustomer/{customerId}");
    }

    private void OnClickRemoveBtn(int customerId) {
        RemoveCustomerUseCase.Execute(customerId);
        LoadCustomers();
    }

    private void LoadCustomers() {
        customers = ViewCustomerUseCase.Execute().OrderBy(x => x.Name);
    }
}