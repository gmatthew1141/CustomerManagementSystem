@inject IGetScheduleUseCase GetScheduleUseCase
@inject IGenerateScheduleByDateUseCase GenerateScheduleByDateUseCase
@inject IGetCustomerByIdUseCase GetCustomerByIdUseCase
@inject IGetBookingByIdUseCase GetBookingByIdUseCase
@inject IUpdateAttendanceUseCase UpdateAttendanceUseCase

<h3 class="text-md-center">Squash</h3>

<table class="table text-md-center ">
    <thead>
        <tr>
            <th class="col-1">Time</th>
            <th class="col-2">1</th>
            <th class="col-2">2</th>
            <th class="col-2"></th>
            <th class="col-2"></th>
            <th class="col-1">Total</th>
        </tr>
    </thead>
    <tbody>
        @if (schedules != null) {
            foreach (var schedule in schedules) {
                <tr>
                    <td>@schedule.Timestamp</td>
                    @if (schedule.Court1 == null) {
                        <td></td>
                    } else {
                        <td style=@(schedule.Court1.Present ? "background-color:dimgray" : "background-color:cyan")>

                            <div class="row">
                                <label class="col">
                                    <b>
                                        @GetCustomerByIdUseCase.GetCustomerById(GetBookingByIdUseCase.GetBooking(schedule.Court1.BookingId).CustomerId).Name
                                    </b>
                                </label>
                            </div>
                            <div class="row">
                                <label class="col">
                                    @GetBookingByIdUseCase.GetBooking(schedule.Court1.BookingId).ExpirationDate.ToString("dd/MM/yy")
                                </label>
                            </div>
                            <div class="row">
                                <button type="button" class="btn btn-block btn-dark" @onclick="() => UpdateAttendance(schedule, schedule.Court1)">Present</button>
                            </div>
                        </td>
                    }
                    @if (schedule.Court2 == null) {
                        <td></td>
                    } else {
                        <td style=@(schedule.Court2.Present ? "background-color:dimgray" : "background-color:cyan")>

                            <div class="row">
                                <label class="col">
                                    <b>
                                        @GetCustomerByIdUseCase.GetCustomerById(GetBookingByIdUseCase.GetBooking(schedule.Court2.BookingId).CustomerId).Name
                                    </b>
                                </label>
                            </div>
                            <div class="row">
                                <label class="col">
                                    @GetBookingByIdUseCase.GetBooking(schedule.Court2.BookingId).ExpirationDate.ToString("dd/MM/yy")
                                </label>
                            </div>
                            <div class="row">
                                <button type="button" class="btn btn-block btn-dark" @onclick="() => UpdateAttendance(schedule, schedule.Court2)">Present</button>
                            </div>
                        </td>
                    }
                    <td></td>
                    <td></td>
                    <td>@schedule.TotalAttendance</td>
                </tr>
            }
        }
    </tbody>
</table>

@code {
    [Parameter]
    public DateTime SelectedDate { get; set; }

    private IEnumerable<Schedule> schedules;

    protected override void OnParametersSet() {
        base.OnParametersSet();

        GenerateScheduleByDateUseCase.Execute(SelectedDate, SportType.Squash);
        schedules = GetScheduleUseCase.Execute();
    }

    private void UpdateAttendance(Schedule schedule, Attendance attendance) {
        UpdateAttendanceUseCase.Execute(schedule, attendance);
    }

}